// pages/api/proxy.tsx
import { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { method, body, query } = req;
  const { doc_path, _ } = query;
  const action = body?.action;

  try {
    if (doc_path) {
      const url = `http://backend:7710/get_file?doc_path=${encodeURIComponent(doc_path as string)}`;
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const fileBuffer = await response.arrayBuffer();
      res.status(response.status).send(Buffer.from(fileBuffer));
    } else if (action) {
      let url = '';
      let requestBody = {};

      switch (action) {
        case 'list_dir_with_metadata':
          url = 'http://backend:7710/list_dir_with_metadata';
          requestBody = { path: body.path };
          break;
        case 'list_dir':
          url = 'http://backend:7710/list_dir';
          requestBody = { path: body.path };
          break;
        case 'add_file':
          url = 'http://backend:7710/add_file';
          requestBody = { path: body.path, file: body.file };
          break;
        case 'delete_file':
          url = 'http://backend:7710/delete_file';
          requestBody = { path: body.path };
          break;
        case 'metadata_search':
          url = 'http://backend:7710/metadata_search';
          requestBody = { tags: body.tags, path: body.path, filename: body.filename };
          break;
        case 'upload_file':
          url = 'http://backend:7710/upload_file';
          const fileFormData = new FormData();
          fileFormData.append('file', body.file.get('file'));
          fileFormData.append('path', body.path);
          requestBody = {
            method: 'POST',
            body: fileFormData,
          };
          break;
        default:
          throw new Error('Invalid action');
      }

      const response = await fetch(url, {
        method: 'POST',
        body: JSON.stringify(requestBody),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const data = await response.json();
      res.status(response.status).json(data);
    } else {
      const url = 'http://backend:7710/search';
      const response = await fetch(url, {
        method,
        body: JSON.stringify(body),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const data = await response.json();
      res.status(response.status).json(data);
    }
  } catch (error) {
    console.log(error);
    res.status(500).json({ error: 'An error occurred' });
  }
}
